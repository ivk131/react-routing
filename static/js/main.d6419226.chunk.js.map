{"version":3,"sources":["intensel.png","company_logo.png","SignIn.js","SignUp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","initialValues","email","password","onSubmit","values","console","log","validate","errors","test","SignIn","classes","formik","useFormik","Container","component","maxWidth","CssBaseline","className","intensel","src","height","alt","Typography","variant","noValidate","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","onChange","handleChange","value","onBlur","handleBlur","type","FormControlLabel","control","Checkbox","color","Button","Grid","container","item","xs","href","to","flex","alignContent","firstName","lastName","SignUp","handleSubmit","sm","justify","App","logo","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d6419226.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/intensel.0f01b70f.png\";","module.exports = __webpack_public_path__ + \"static/media/company_logo.25cf1a1f.png\";","import React from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport { Link } from \"react-router-dom\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useFormik } from \"formik\";\n\nimport intensel from \"./intensel.png\";\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst initialValues = {\n  email: \"\",\n  password: \"\",\n};\n\nconst onSubmit = (values) => {\n  console.log(\"Form data\", values);\n};\n\nconst validate = (values) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = \" \";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n  if (!values.password) {\n    errors.password = \" \";\n  }\n\n  return errors;\n};\n\nexport default function SignIn() {\n  const classes = useStyles();\n  const formik = useFormik({\n    initialValues,\n    onSubmit,\n    validate,\n  });\n\n  return (\n    <Container component='main' maxWidth='xs'>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <div className={classes.intensel}>\n          <img src={intensel} width='250px' height='100px' alt='' />\n        </div>\n        <Typography component='h1' variant='h5'>\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant='outlined'\n            margin='normal'\n            required\n            fullWidth\n            id='email'\n            label='Email Address'\n            name='email'\n            autoComplete='email'\n            autoFocus\n            onChange={formik.handleChange}\n            value={formik.values.email}\n            onBlur={formik.handleBlur}\n          />\n          {formik.errors.email ? (\n            <div className='error'>{formik.errors.email} </div>\n          ) : null}\n\n          <TextField\n            variant='outlined'\n            margin='normal'\n            fullWidth\n            name='password'\n            label='Password'\n            type='password'\n            required\n            id='password'\n            autoComplete='current-password'\n            onChange={formik.handleChange}\n            value={formik.values.password}\n            onBlur={formik.handleBlur}\n          />\n          {formik.errors.password ? (\n            <div className='error'>{formik.errors.password} </div>\n          ) : null}\n\n          <FormControlLabel\n            control={<Checkbox value='remember' color='primary' />}\n            label='Remember me'\n          />\n          <Button\n            type='submit'\n            fullWidth\n            variant='contained'\n            color='primary'\n            className={classes.submit}>\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href='#' variant='body2'>\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link to='/' variant='body2'>\n                Don't have an account? Sign Up\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Link } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { useFormik } from \"formik\";\nimport \"./SignUp.css\";\n\nimport intensel from \"./intensel.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flex: 0.4,\n    alignContent: \"right\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  intensel: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst initialValues = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n};\n\nconst onSubmit = (values) => {\n  console.log(\"Form data\", values);\n};\n\nconst validate = (values) => {\n  let errors = {};\n\n  if (!values.firstName) {\n    errors.firstName = \"\";\n  }\n  if (!values.lastName) {\n    errors.lastName = \"\";\n  }\n  if (!values.email) {\n    errors.email = \"\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n  if (!values.password) {\n    errors.password = \"\";\n  }\n\n  return errors;\n};\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const formik = useFormik({\n    initialValues,\n    onSubmit,\n    validate,\n  });\n\n  // console.log(\"form errors\", formik.errors);\n  // console.log(\"visited filled\", formik.touched);\n  return (\n    <Container component='main' maxWidth='xs'>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <div className={classes.intensel}>\n          <img src={intensel} width='250px' height='100px' alt='' />\n        </div>\n        <Typography component='h1' variant='h5'>\n          Sign up\n        </Typography>\n        <form\n          className={classes.form}\n          noValidate\n          onSubmit={formik.handleSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete='fname'\n                name='firstName'\n                variant='outlined'\n                fullWidth\n                required\n                id='firstName'\n                label='First Name'\n                autoFocus\n                onChange={formik.handleChange}\n                value={formik.values.firstName}\n                onBlur={formik.handleBlur}\n              />\n              {formik.errors.firstName ? (\n                <div className='error'>{formik.errors.firstName} </div>\n              ) : null}\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant='outlined'\n                fullWidth\n                required\n                id='lastName'\n                label='Last Name'\n                name='lastName'\n                autoComplete='lname'\n                onChange={formik.handleChange}\n                value={formik.values.lastName}\n                onBlur={formik.handleBlur}\n              />\n              {formik.errors.lastName ? (\n                <div className='error'>{formik.errors.lastName} </div>\n              ) : null}\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                fullWidth\n                id='email'\n                label='Email Address'\n                required\n                name='email'\n                autoComplete='email'\n                onChange={formik.handleChange}\n                value={formik.values.email}\n                onBlur={formik.handleBlur}\n              />\n              {formik.errors.email ? (\n                <div className='error'>{formik.errors.email} </div>\n              ) : null}\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                fullWidth\n                name='password'\n                required\n                label='Password'\n                type='password'\n                id='password'\n                autoComplete='current-password'\n                onChange={formik.handleChange}\n                value={formik.values.password}\n                onBlur={formik.handleBlur}\n              />\n              {formik.errors.password ? (\n                <div className='error'>{formik.errors.password} </div>\n              ) : null}\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox value='allowExtraEmails' color='primary' />}\n                label='I agree with terms and condition'\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type='submit'\n            fullWidth\n            variant='contained'\n            color='primary'\n            className={classes.submit}>\n            Sign Up\n          </Button>\n          <Grid container justify='flex-end'>\n            <Grid item>\n              <Link to='/signin' variant='body2'>\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport SignIn from \"./SignIn\";\nimport SignUp from \"./SignUp\";\nimport logo from \"./company_logo.png\";\n\nfunction App() {\n  return (\n    <div className='app'>\n      <div className='app__left'>\n        <img\n          src={logo}\n          alt=''\n          className='app_leftlogo'\n          width='390x'\n          height='300px'\n        />\n      </div>\n\n      <div className='app__right'>\n        <Router>\n          <div>\n            <Route path='/' exact component={SignUp}></Route>\n\n            <Switch>\n              <Route path='/react-routing' exact component={SignUp}></Route>\n            </Switch>\n            <Route path='/signin' component={SignIn}></Route>\n          </div>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}